/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 *
 * This was created via
 * ```
 * git clone https://github.com/opengeospatial/2D-Tile-Matrix-Set
 * git checkout a1179bb
 * cd 2D-Tile-Matrix-Set/schemas/tms/2.0/json
 * npx json-schema-to-typescript tileMatrixSet.json > tile-matrix-set-schema.d.ts
 * ```
 */

export type CRS =
  | string
  | (
      | {
          /**
           * Reference to one coordinate reference system (CRS)
           */
          uri: string;
          [k: string]: unknown;
        }
      | {
          wkt: {
            [k: string]: unknown;
          } & HttpsProjOrgSchemasV02ProjjsonSchemaJson;
          [k: string]: unknown;
        }
      | {
          /**
           * A reference system data structure as defined in the MD_ReferenceSystem of the ISO 19115
           */
          referenceSystem: {
            [k: string]: unknown;
          };
          [k: string]: unknown;
        }
    );
/**
 * Schema for PROJJSON (v0.2.1)
 */
export type HttpsProjOrgSchemasV02ProjjsonSchemaJson =
  | (
      | BoundCrs
      | CompoundCrs
      | DerivedEngineeringCrs
      | DerivedGeodeticCrs
      | DerivedParametricCrs
      | DerivedProjectedCrs
      | DerivedTemporalCrs
      | DerivedVerticalCrs
      | EngineeringCrs
      | GeodeticCrs
      | ParametricCrs
      | ProjectedCrs
      | TemporalCrs
      | VerticalCrs
    )
  | (
      | GeodeticReferenceFrame
      | VerticalReferenceFrame
      | DynamicGeodeticReferenceFrame
      | DynamicVerticalReferenceFrame
      | TemporalDatum
      | ParametricDatum
      | EngineeringDatum
    )
  | DatumEnsemble
  | Ellipsoid
  | PrimeMeridian
  | (Conversion | Transformation)
  | ConcatenatedOperation;
export type AbridgedTransformation = {
  [k: string]: unknown;
} & {
  $schema?: string;
  type?: "AbridgedTransformation";
  name: string;
  method: Method;
  parameters: ParameterValue[];
  id?: Id;
  ids?: Ids;
};
export type Method = {
  [k: string]: unknown;
} & {
  $schema?: string;
  type?: "OperationMethod";
  name: string;
  id?: Id;
  ids?: Ids;
};
export type Ids = Id[];
export type ParameterValue = {
  [k: string]: unknown;
} & {
  $schema?: string;
  type?: "ParameterValue";
  name: string;
  value: string | number;
  unit?:
    | ("metre" | "degree" | "unity")
    | {
        [k: string]: unknown;
      };
  id?: Id;
  ids?: Ids;
};
export type CompoundCrs = {
  [k: string]: unknown;
} & {
  type?: "CompoundCRS";
  name: string;
  components: (
    | BoundCrs
    | CompoundCrs
    | DerivedEngineeringCrs
    | DerivedGeodeticCrs
    | DerivedParametricCrs
    | DerivedProjectedCrs
    | DerivedTemporalCrs
    | DerivedVerticalCrs
    | EngineeringCrs
    | GeodeticCrs
    | ParametricCrs
    | ProjectedCrs
    | TemporalCrs
    | VerticalCrs
  )[];
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type DerivedEngineeringCrs = {
  [k: string]: unknown;
} & {
  type?: "DerivedEngineeringCRS";
  name: string;
  base_crs: EngineeringCrs;
  conversion: Conversion;
  coordinate_system: CoordinateSystem;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type EngineeringCrs = {
  [k: string]: unknown;
} & {
  type?: "EngineeringCRS";
  name: string;
  datum: EngineeringDatum;
  coordinate_system?: CoordinateSystem;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type EngineeringDatum = {
  [k: string]: unknown;
} & {
  type?: "EngineeringDatum";
  name: string;
  anchor?: string;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type CoordinateSystem = {
  [k: string]: unknown;
} & {
  $schema?: string;
  type?: "CoordinateSystem";
  name?: string;
  subtype:
    | "Cartesian"
    | "spherical"
    | "ellipsoidal"
    | "vertical"
    | "ordinal"
    | "parametric"
    | "TemporalDateTime"
    | "TemporalCount"
    | "TemporalMeasure";
  axis: Axis[];
  id?: Id;
  ids?: Ids;
};
export type Axis = {
  [k: string]: unknown;
} & {
  $schema?: string;
  type?: "Axis";
  name: string;
  abbreviation: string;
  direction:
    | "north"
    | "northNorthEast"
    | "northEast"
    | "eastNorthEast"
    | "east"
    | "eastSouthEast"
    | "southEast"
    | "southSouthEast"
    | "south"
    | "southSouthWest"
    | "southWest"
    | "westSouthWest"
    | "west"
    | "westNorthWest"
    | "northWest"
    | "northNorthWest"
    | "up"
    | "down"
    | "geocentricX"
    | "geocentricY"
    | "geocentricZ"
    | "columnPositive"
    | "columnNegative"
    | "rowPositive"
    | "rowNegative"
    | "displayRight"
    | "displayLeft"
    | "displayUp"
    | "displayDown"
    | "forward"
    | "aft"
    | "port"
    | "starboard"
    | "clockwise"
    | "counterClockwise"
    | "towards"
    | "awayFrom"
    | "future"
    | "past"
    | "unspecified";
  unit?:
    | ("metre" | "degree" | "unity")
    | {
        [k: string]: unknown;
      };
  id?: Id;
  ids?: Ids;
};
export type Conversion = {
  [k: string]: unknown;
} & {
  $schema?: string;
  type?: "Conversion";
  name: string;
  method: Method;
  parameters?: ParameterValue[];
  id?: Id;
  ids?: Ids;
};
export type DerivedGeodeticCrs = {
  [k: string]: unknown;
} & {
  type?: "DerivedGeodeticCRS" | "DerivedGeographicCRS";
  name: string;
  base_crs: GeodeticCrs;
  conversion: Conversion;
  coordinate_system: CoordinateSystem;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
/**
 * One and only one of datum and datum_ensemble must be provided
 */
export type GeodeticCrs = {
  [k: string]: unknown;
} & {
  type?: "GeodeticCRS" | "GeographicCRS";
  name: string;
  datum?: GeodeticReferenceFrame | DynamicGeodeticReferenceFrame;
  datum_ensemble?: DatumEnsemble;
  coordinate_system?: CoordinateSystem;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type GeodeticReferenceFrame = {
  [k: string]: unknown;
} & {
  type?: "GeodeticReferenceFrame";
  name: string;
  anchor?: string;
  ellipsoid: Ellipsoid;
  prime_meridian?: PrimeMeridian;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type Ellipsoid = {
  [k: string]: unknown;
} & (
  | {
      $schema?: string;
      type?: "Ellipsoid";
      name: string;
      semi_major_axis: number | ValueAndUnit;
      semi_minor_axis: number | ValueAndUnit;
      id?: Id;
      ids?: Ids;
    }
  | {
      $schema?: string;
      type?: "Ellipsoid";
      name: string;
      semi_major_axis: number | ValueAndUnit;
      inverse_flattening: number;
      id?: Id;
      ids?: Ids;
    }
  | {
      $schema?: string;
      type?: "Ellipsoid";
      name: string;
      radius: number | ValueAndUnit;
      id?: Id;
      ids?: Ids;
    }
);
export type PrimeMeridian = {
  [k: string]: unknown;
} & {
  $schema?: string;
  type?: "PrimeMeridian";
  name: string;
  longitude?: number | ValueAndUnit;
  id?: Id;
  ids?: Ids;
};
export type DynamicGeodeticReferenceFrame = GeodeticReferenceFrame & {
  type?: "DynamicGeodeticReferenceFrame";
  name: unknown;
  anchor?: unknown;
  ellipsoid: unknown;
  prime_meridian?: unknown;
  frame_reference_epoch: number;
  deformation_model?: string;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type DatumEnsemble = {
  [k: string]: unknown;
} & {
  $schema?: string;
  type?: "DatumEnsemble";
  name: string;
  members: {
    [k: string]: unknown;
  }[];
  ellipsoid?: Ellipsoid;
  accuracy: string;
  id?: Id;
  ids?: Ids;
};
export type DerivedParametricCrs = {
  [k: string]: unknown;
} & {
  type?: "DerivedParametricCRS";
  name: string;
  base_crs: ParametricCrs;
  conversion: Conversion;
  coordinate_system: CoordinateSystem;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type ParametricCrs = {
  [k: string]: unknown;
} & {
  type?: "ParametricCRS";
  name: string;
  datum: ParametricDatum;
  coordinate_system?: CoordinateSystem;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type ParametricDatum = {
  [k: string]: unknown;
} & {
  type?: "ParametricDatum";
  name: string;
  anchor?: string;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type DerivedProjectedCrs = {
  [k: string]: unknown;
} & {
  type?: "DerivedProjectedCRS";
  name: string;
  base_crs: ProjectedCrs;
  conversion: Conversion;
  coordinate_system: CoordinateSystem;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type ProjectedCrs = {
  [k: string]: unknown;
} & {
  type?: "ProjectedCRS";
  name: string;
  base_crs: GeodeticCrs;
  conversion: Conversion;
  coordinate_system: CoordinateSystem;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type DerivedTemporalCrs = {
  [k: string]: unknown;
} & {
  type?: "DerivedTemporalCRS";
  name: string;
  base_crs: TemporalCrs;
  conversion: Conversion;
  coordinate_system: CoordinateSystem;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type TemporalCrs = {
  [k: string]: unknown;
} & {
  type?: "TemporalCRS";
  name: string;
  datum: TemporalDatum;
  coordinate_system?: CoordinateSystem;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type TemporalDatum = {
  [k: string]: unknown;
} & {
  type?: "TemporalDatum";
  name: string;
  calendar: string;
  time_origin?: string;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type DerivedVerticalCrs = {
  [k: string]: unknown;
} & {
  type?: "DerivedVerticalCRS";
  name: string;
  base_crs: VerticalCrs;
  conversion: Conversion;
  coordinate_system: CoordinateSystem;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
/**
 * One and only one of datum and datum_ensemble must be provided
 */
export type VerticalCrs = {
  [k: string]: unknown;
} & {
  type?: "VerticalCRS";
  name: string;
  datum?: VerticalReferenceFrame | DynamicVerticalReferenceFrame;
  datum_ensemble?: DatumEnsemble;
  coordinate_system?: CoordinateSystem;
  geoid_model?: {
    name: string;
    interpolation_crs?:
      | BoundCrs
      | CompoundCrs
      | DerivedEngineeringCrs
      | DerivedGeodeticCrs
      | DerivedParametricCrs
      | DerivedProjectedCrs
      | DerivedTemporalCrs
      | DerivedVerticalCrs
      | EngineeringCrs
      | GeodeticCrs
      | ParametricCrs
      | ProjectedCrs
      | TemporalCrs
      | VerticalCrs;
    id?: Id;
  };
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type VerticalReferenceFrame = {
  [k: string]: unknown;
} & {
  type?: "VerticalReferenceFrame";
  name: string;
  anchor?: string;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type DynamicVerticalReferenceFrame = VerticalReferenceFrame & {
  type?: "DynamicVerticalReferenceFrame";
  name: unknown;
  anchor?: unknown;
  frame_reference_epoch: number;
  deformation_model?: string;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type Transformation = {
  [k: string]: unknown;
} & {
  type?: "Transformation";
  name: string;
  source_crs:
    | BoundCrs
    | CompoundCrs
    | DerivedEngineeringCrs
    | DerivedGeodeticCrs
    | DerivedParametricCrs
    | DerivedProjectedCrs
    | DerivedTemporalCrs
    | DerivedVerticalCrs
    | EngineeringCrs
    | GeodeticCrs
    | ParametricCrs
    | ProjectedCrs
    | TemporalCrs
    | VerticalCrs;
  target_crs:
    | BoundCrs
    | CompoundCrs
    | DerivedEngineeringCrs
    | DerivedGeodeticCrs
    | DerivedParametricCrs
    | DerivedProjectedCrs
    | DerivedTemporalCrs
    | DerivedVerticalCrs
    | EngineeringCrs
    | GeodeticCrs
    | ParametricCrs
    | ProjectedCrs
    | TemporalCrs
    | VerticalCrs;
  interpolation_crs?:
    | BoundCrs
    | CompoundCrs
    | DerivedEngineeringCrs
    | DerivedGeodeticCrs
    | DerivedParametricCrs
    | DerivedProjectedCrs
    | DerivedTemporalCrs
    | DerivedVerticalCrs
    | EngineeringCrs
    | GeodeticCrs
    | ParametricCrs
    | ProjectedCrs
    | TemporalCrs
    | VerticalCrs;
  method: Method;
  parameters: ParameterValue[];
  accuracy?: string;
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
export type ConcatenatedOperation = {
  [k: string]: unknown;
} & {
  type?: "ConcatenatedOperation";
  name: string;
  source_crs:
    | BoundCrs
    | CompoundCrs
    | DerivedEngineeringCrs
    | DerivedGeodeticCrs
    | DerivedParametricCrs
    | DerivedProjectedCrs
    | DerivedTemporalCrs
    | DerivedVerticalCrs
    | EngineeringCrs
    | GeodeticCrs
    | ParametricCrs
    | ProjectedCrs
    | TemporalCrs
    | VerticalCrs;
  target_crs:
    | BoundCrs
    | CompoundCrs
    | DerivedEngineeringCrs
    | DerivedGeodeticCrs
    | DerivedParametricCrs
    | DerivedProjectedCrs
    | DerivedTemporalCrs
    | DerivedVerticalCrs
    | EngineeringCrs
    | GeodeticCrs
    | ParametricCrs
    | ProjectedCrs
    | TemporalCrs
    | VerticalCrs;
  steps: (Conversion | Transformation)[];
  $schema?: unknown;
  scope?: unknown;
  area?: unknown;
  bbox?: unknown;
  usages?: unknown;
  remarks?: unknown;
  id?: unknown;
  ids?: unknown;
};
/**
 * A 2D Point in the CRS indicated elsewhere
 *
 * @minItems 2
 * @maxItems 2
 */
export type DPoint = [number, number];

/**
 * A definition of a tile matrix set following the Tile Matrix Set standard. For tileset metadata, such a description (in `tileMatrixSet` property) is only required for offline use, as an alternative to a link with a `http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme` relation type.
 */
export interface TileMatrixSetDefinition {
  /**
   * Title of this tile matrix set, normally used for display to a human
   */
  title?: string;
  /**
   * Brief narrative description of this tile matrix set, normally available for display to a human
   */
  description?: string;
  /**
   * Unordered list of one or more commonly used or formalized word(s) or phrase(s) used to describe this tile matrix set
   */
  keywords?: string[];
  /**
   * Tile matrix set identifier. Implementation of 'identifier'
   */
  id?: string;
  /**
   * Reference to an official source for this tileMatrixSet
   */
  uri?: string;
  /**
   * @minItems 1
   */
  orderedAxes?: [string, ...string[]];
  crs: {
    [k: string]: unknown;
  } & CRS;
  /**
   * Reference to a well-known scale set
   */
  wellKnownScaleSet?: string;
  boundingBox?: {
    [k: string]: unknown;
  } & DBoundingBox;
  /**
   * Describes scale levels and its tile matrices
   */
  tileMatrices: TileMatrix[];
  [k: string]: unknown;
}
export interface BoundCrs {
  $schema?: string;
  type?: "BoundCRS";
  source_crs:
    | BoundCrs
    | CompoundCrs
    | DerivedEngineeringCrs
    | DerivedGeodeticCrs
    | DerivedParametricCrs
    | DerivedProjectedCrs
    | DerivedTemporalCrs
    | DerivedVerticalCrs
    | EngineeringCrs
    | GeodeticCrs
    | ParametricCrs
    | ProjectedCrs
    | TemporalCrs
    | VerticalCrs;
  target_crs:
    | BoundCrs
    | CompoundCrs
    | DerivedEngineeringCrs
    | DerivedGeodeticCrs
    | DerivedParametricCrs
    | DerivedProjectedCrs
    | DerivedTemporalCrs
    | DerivedVerticalCrs
    | EngineeringCrs
    | GeodeticCrs
    | ParametricCrs
    | ProjectedCrs
    | TemporalCrs
    | VerticalCrs;
  transformation: AbridgedTransformation;
}
export interface Id {
  authority: string;
  code: string | number;
}
export interface ValueAndUnit {
  value: number;
  unit:
    | ("metre" | "degree" | "unity")
    | {
        [k: string]: unknown;
      };
}
/**
 * Minimum bounding rectangle surrounding a 2D resource in the CRS indicated elsewhere
 */
export interface DBoundingBox {
  lowerLeft: DPoint;
  upperRight: DPoint;
  crs?: CRS;
  /**
   * @minItems 2
   * @maxItems 2
   */
  orderedAxes?: [string, string];
  [k: string]: unknown;
}
/**
 * A tile matrix, usually corresponding to a particular zoom level of a TileMatrixSet.
 */
export interface TileMatrix {
  /**
   * Title of this tile matrix, normally used for display to a human
   */
  title?: string;
  /**
   * Brief narrative description of this tile matrix set, normally available for display to a human
   */
  description?: string;
  /**
   * Unordered list of one or more commonly used or formalized word(s) or phrase(s) used to describe this dataset
   */
  keywords?: string[];
  /**
   * Identifier selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile. Implementation of 'identifier'
   */
  id: string;
  /**
   * Scale denominator of this tile matrix
   */
  scaleDenominator: number;
  /**
   * Cell size of this tile matrix
   */
  cellSize: number;
  /**
   * The corner of the tile matrix (_topLeft_ or _bottomLeft_) used as the origin for numbering tile rows and columns. This corner is also a corner of the (0, 0) tile.
   */
  cornerOfOrigin?: "topLeft" | "bottomLeft";
  pointOfOrigin: {
    [k: string]: unknown;
  } & DPoint;
  /**
   * Width of each tile of this tile matrix in pixels
   */
  tileWidth: number;
  /**
   * Height of each tile of this tile matrix in pixels
   */
  tileHeight: number;
  /**
   * Width of the matrix (number of tiles in width)
   */
  matrixHeight: number;
  /**
   * Height of the matrix (number of tiles in height)
   */
  matrixWidth: number;
  /**
   * Describes the rows that has variable matrix width
   */
  variableMatrixWidths?: VariableMatrixWidth[];
  [k: string]: unknown;
}
/**
 * Variable Matrix Width data structure
 */
export interface VariableMatrixWidth {
  /**
   * Number of tiles in width that coalesce in a single tile for these rows
   */
  coalesce: number;
  /**
   * First tile row where the coalescence factor applies for this tilematrix
   */
  minTileRow: number;
  /**
   * Last tile row where the coalescence factor applies for this tilematrix
   */
  maxTileRow: number;
  [k: string]: unknown;
}
